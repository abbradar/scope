# PCSGU250 oscilloscope control via USB bus

## USB id
idVendor 0x10cf (Velleman Components, Inc.)
idProduct 0x2501

## Loading the firmware
First, byte 08 should be sent, then 54912 bytes of firmware.

## Checking formware version
Send byte 0F, then receive string like "31 2E 30 31 0D" ("1.01\r")

# Scope setting

Scope setting takes place by means of a single 10 bytes packet.

The command begins with these three bytes: 0E 80 07
0E = load setting
80 = scope setting command
07 = number of bytes to send

Then, there will be seven control bytes:
byte 1 = volt_div_ch1 + DC_coupling1 + GND_coupling1 * 16
byte 2 = volt_div_ch2 + DC_coupling2 + GND_coupling2 * 16
byte 3 = y-position_ch1
byte 4 = y-position_ch2
byte 5 = trigg_level
byte 6 = time_div
byte 7 = trg_ch + 2*no_trg + 4*neg_trg + 8*digi_on

volt_div_ch1
volt_div_ch2
byte
22 = 10 mV/div
02 = 30 mV/div
24 = 0.1 V/div
04 = 0.3 V/div
28 = 1 V/div
08 = 3 V/div

DC_coupling1
DC_coupling2
bit
0 = AC coupling
1 = DC coupling

GND_coupling1
GND_coupling2
bit
0 = GND coupling Off
1 = GND coupling On

y-position_ch1
y-position_ch2
byte
00 = max position
F7 = min position
78(about) = Middle position according to the calibration data:
CH1 offset at 3V/div
CH2 offset at 3V/div

trigg_level
byte
00 = low
7F = middle
FF = high

time_div
byte Time/div sample_rate
C1 = 500 ms/div 12.5 MHz /50000
C2 = 200 ms/div 12.5 MHz /20000
E0 = 100 ms/div 12.5 MHz /10000
E1 = 50 ms/div 12.5 MHz /5000
E2 = 20 ms/div 12.5 MHz /2000
F0 = 10 ms/div 12.5 MHz /1000
F1 = 5 ms/div 12.5 MHz /500
F2 = 2 ms/div 12.5 MHz /200
F8 = 1 ms/div 12.5 MHz /100
F9 = 0.5 ms/div 12.5 MHz /50
FA = 0.2 ms/div 12.5 MHz /20
FC = 0.1 ms/div 12.5 MHz /10
FD = 50 us/div 12.5 MHz /5
FE = 20 us/div 12.5 MHz /2
80 = 10 us/div 12.5 MHz
40 = 5 us/div 25 MHz

trg_ch
bit
0 = Trigger source CH1
1 = Trigger source CH2

no_trg
bit
0 = Trigger Off
1 = Trigger On

neg_trg
bit
0 = Trigger edge Up
1 = Trigger edge Down

digi_on
bit
0 = Digital display mode Off
1 = Digital display mode On

Example:
This sequence will set scope to its initial state: 0E 80 07 29 29 76 75 7F F8 00
Volts/div = 1V (ch1 and ch2)
Time/div = 1ms
Y-position = middle
Trigger level = middle
Trigger = off
Source = Ch1
Edge = positive

## Reading data
First, byte 09 and then 0B is transmitted:
byte
09 = reset scope
0B = waiting for trigger

After then, characters are read one at a time:
1. Scope repeatedly transmits byte 4E ("N") until the trigger occurs
2. When trigger occurs and scope has read data into its memory, it sends byte 44 ("D")
3. After this send to scope byte 0A, after which it sends 8192 bytes of data.
Data is read one by one.
The first byte is the channel 2 data, the second byte is the channel 1 data etc.
After that, send 0B again and repeat process.

## Function Transient Recorder mode
Setting
no_trg
bit
0 = Trigger Off

time_div
byte Time/div sample_rate
02 = 10 us/div 12.5 Mhz (???)

Scope setting example: 0E 80 07 29 29 77 75 7F 02 00
Important bytes are 02 and the last (00)

Next, send byte 09 and the 0B:
09 = reset scope
0B = waiting for trigger (trigger off, so the data is coming soon)

Then characters from scope are read one at a time (there will be 64 bytes) until a 44 ("D")
After this send to scope character 0A, after which it sends 8192 bytes of data.
Data is read one by one, this data is not used for anything.

Next, send 0C to scope and read 64 characters of data, ignoring it. Then reset
and initiate new data transmission (09 0B). Byte 0C is sent to a software timer
control, to provide the desired number of samples, unit of time.

Then reset scope (09 0B). Read charactes from scope one at a time until a 44.
After that, write 0C to oscilloscope and read 64 characters of data. Data is
read as byte/channel (eg. byte #62 is for Ch2 and #61 is for Ch1), draw it as
curve on the screen.

After that, wait for 44, write 0C, read data from 64 characters, draw them on
the screen, etc.

## Digital Logic Analyzer mode (10110010 signal sent)
Setting
digi_on
bit
1 = Digital display mode On

Scope is set up normally and is read 8192 bytes of data.
Then display a graph of data bits. Drawing begins from first channel in the first
byte low bit. If the bit is a 1, then draw the high line on the screen, if 0
then draw low line. This will provide a digital signal on the screen.

# Function generator setting

Function generator setting takes place by means of a single 7 bytes packet.

The command begins with these three bytes: 0E 05 04
0E = load setting
80 = stop and reset counting
04 = number of bytes to send

Then, there will be four control bytes:
byte 1 = dc_offset
byte 2 = ampl + 8 * sel_f + 64 * relay_state
byte 3 = correction + 16 * power_LED
byte 4 = filter + 8 * enable_sweep

dc_offset
Waveform offset. Zero level is 7F, -5V offset is 00 and +5V offset is FF.

ampl
Generator coarse amplitude setting. 3 bits.

sel_f
Generator frequency range, 3 bits. (this data is not avaliable for setting in
FPGA now --- these bits are always zero)

relay_state
Generator output relay mode, 2 bits. (this data is not avaliable for setting in
FPGA now --- these bits are always zero)

correction
Tuning of amplitude, +/-5%, 3 bits.

power_LED
LED mode. 2 bits. 0 = off, 1 = less intense, 2 = brighter.

filter
Setting frequency and wave shape of the filter, 3 bits.

enable_generator
Enables generator, 1 bit. 1 = enable, 0 = stop now.

Example
Use this command for basic generator setting: 0E 05 04 7F 4E 24 0F

## Setting generator waveform
First send byte 0x04.
Then, 512 sequencial bytes of waveform data.

## Generator frequency setting
Send 0E (load setting) 02 13, followed by 19 character frequency setting (for
details see the following pages)
For example, 0E 02 13 00 00 00 00 00 00 00 00 23 D6 E2 53 00 00 A0 86 01 00 00

Finally, transmit 0x06 to the generator, which starts waveform generation.

## Filter setting
Sweep mode
(f refers to the starting scan frequency or ending frequency)
f = 0 ... 50 kHz filter  = 7
f = 50 kHz ... 150 kHz filter = 6
f = 150 kHz ... 300 kHz filter = 5
f = 300 kHz ... 500 kHz filter = 4
f = 500 kHz ... 700 kHz filter = 2
f = 700 kHz ... 1000 kHz filter = 1

Sine and triangular wave
f = 0 ... 50 kHz filter = 7
f = 50 kHz ... 150 kHz filter = 6
f = 150 kHz ... 300 kHz filter = 5
f = 300 kHz ... 400 kHz filter = 3
f = 400 kHz ... 500 kHz filter = 2
f = 500 kHz ... 1000 kHz filter = 1

Sin(x)/x wave
f = 0 ... 5 kHz filter = 7
f = 5 kHz ... 50 kHz filter = 6
f = 50 kHz ... 500 kHz filter = 1

Square wave
filter = 0

Library wave
f = 0...50 kHz filter = 7
f = 50 kHz...500 kHz filter = 0

DC signal
filter = 7

# PCSGU250 function generator and frequency sweep setting

## Principle of operation
In RAM memory there are 512 characters stored that constitute the single waveform
cycle. Memory address is formed from the 44-bit address counter, taking 9 bits
from the highest.
Address counter is increased with CLK clock speeds. CLK is either 12.5MHz (when
filter <= 5) or 6.25MHz (when filter > 5).
(Program variable "filter" is controlling digital filter function and sampling
speed of the FPGA circuit)

Number for incrementing Address Counter is stored in Phase Increment Register,
which is also 44-bit. This register value is added to the Address Counter value
on each clock pulse.

## Phase Increment value calculation
For D/A converter (DAC) to output with desired frequency RAM memory address
should make a "full circle" 0..512 each signal period.
This is achieved with Address Counter increment with an appropriate value each
clock pulse.
That value is stored in the Phase Increment Register.

PHASE INCREMENT = 2^44 * (desired frequency) / (CLK frequency)

Example 1:
desired frequency = 500 Hz
sine wave
filter = 7
CLK frequency = 6.25 MHz
PHASE INCREMENT = 2^44 * 500 / (6.25 * 10^6) ~= 1407374883,55328
~= 00 00 53 E2 D6 23

Example 2:
desired frequency = 500 Hz
square wave
filter = 0
CLK frequency = 12.5 MHz
PHASE INCREMENT = 2^44 * 500 / (12.5 * 10^6) ~= 703687441.77664
~= 00 00 29 F1 6B 11

This integer is sent to the oscilloscope with lowest byte first.

## Operating frequency sweep mode
Incrementing is currently using custom step.
Step is stored in the Sweep Increment Register.
That number is added every 100 us to the Increment Phase Register value.
In addition, those 100 us pulses increment 32 bit counter. When the counter
is equal to the Sweep Complete Register value sweep is performed.
In this case, original Phase Increment Register value is loaded and the
new round begins.

Sweep Increment is calculated based on the start frequency (f1) and the end
frequency (f2) using the following formula:
For filter > 5:
SWEEP INCREMENT = 2 * 2^64 * (f2 - f1) / (CLK frequency) / (sweep time[sec] * 10000)
For filter <= 5:
SWEEP INCREMENT = 2^64 * (f2 - f1) / (CLK frequency) / (sweep time[sec] * 10000)

Example:
f1 = 1000 Hz
f2 = 10000 Hz
filter > 5
sweep time = 25 sec
CLK frequency = 6.25 MHz

SWEEP INCREMENT = 2 * 2^64 * 9000 / (6.25 * 10^6) / (25 * 10000) ~= 212506491729.134
~= 00 00 00 31 7A 5F BB 51

This integer is sent to the oscilloscope with lowest byte first.

## SWEEP COMPLETE registry value calculation
The register contains sweep steps number for 100 us units when the filter <= 5 and
200 us units when the filter > 5.

For filter <= 5:
SWEEP COMPLETE = 10^4 * time
For filter > 5:
SWEEP COMPLETE = 10^4 * time / 2

Example:
sweep time = 25 sec
filter > 5

SWEEP COMPLETE = 10^4 * 25 / 2 = 125000 = 00 00 01 E8 48

For example, this will set frequency sweep mode in oscilloscope to the linear
frequency sweep:
0E 02 13 51 BB 5F 7A 31 00 00 00 47 AC C5 A7 00 00 48 E8 01 00 00

If the frequency sweep is to be logarithmic, SWEEP INCREMENT is calcucated as
in this formula:

For filter > 5:
SWEEP INCREMENT = 2 * 2^59 * 9000 / (6.25 * 10^6) / (25 * 10000) ~= 6640827866.53544
~= 00 00 00 01 8B D2 FD DA
(For logarithmic sweep use 2^59 in the formula)

SWEEP COMPLETE is calcucated using this formula:
SWEEP COMPLETE = 10^4 * 25 / 2 / 8 = 15625 = 00 00 00 3D 09
(For logarithmic sweep also divide by 8 in the formula)

In addition, if the second lowest bit in the last transmitted byte in the settings
is set to 1, the frequency sweep will be logarithmic.

Send the bytes to the oscilloscope as thus:
0E 02 13 DA FD D2 8B 01 00 00 00 47 AC C5 A7 00 00 09 3D 00 00 02

f1 = 1000 Hz
f2 = 10000 Hz
filter > 5
sweep time = 25 sec
CLK frequency = 6.25 MHz
logarithmic frequency sweep
